package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// start-patient-document
type PatientDocument struct {
	PatientName   string        `bson:"patientName"`
	PatientID     int32         `bson:"patientId"`
	PatientRecord PatientRecord `bson:"patientRecord"`
}

// end-patient-document

// start-patient-record
type PatientRecord struct {
	SSN        string      `bson:"ssn"`
	Billing    PaymentInfo `bson:"billing"`
	BillAmount int         `bson:"billAmount"`
}

// end-patient-record

// start-payment-info
type PaymentInfo struct {
	Type   string `bson:"type"`
	Number string `bson:"number"`
}

var (
	ctx = context.Background()
	// Test key material generated by: echo $(head -c 96 /dev/urandom | base64 | tr -d '\n')
	localMasterKey = "YOm8sMifl7BUJW8vEw4UGpGKtFDIooyat4DDTDmPI+og7PsERJZVE2ldsEanYN58HhUkl8LxLjjXRyc2ctQG/Gpjg8xUqAE1XwMgyXxYnwN7MnJYSC+0msDmyMybySny"
	kmsProviders   map[string]map[string]interface{}
)

func main() {
	client := createEncryptedClient()
	defer client.Disconnect(ctx)

	opts := options.ClientEncryption().
		SetKeyVaultNamespace("keyvault.datakeys").
		SetKmsProviders(kmsProviders)

	clientEncryption, err := mongo.NewClientEncryption(client, opts)
	if err != nil {
		panic(fmt.Sprintf("Unable to create a ClientEncryption instance due to the following error: %s\n", err))
	}

	keyIdSSN, err := createEncryptionKey(clientEncryption, "ssn_key")
	if err != nil {
		log.Fatalf("Failed to create key for ssn: %v", err)
	}

	keyIdBilling, err := createEncryptionKey(clientEncryption, "billing_key")
	if err != nil {
		log.Fatalf("Failed to create key for billing: %v", err)
	}

	// create a client with auto encryption
	schemaMap := bson.M{
		"fields": []bson.M{
			bson.M{
				"keyId":    keyIdSSN,
				"path":     "patientRecord.ssn",
				"bsonType": "string",
				"queries": []bson.M{
					{"queryType": "equality"},
				},
			},
			bson.M{
				"keyId":    keyIdBilling,
				"path":     "patientRecord.billing",
				"bsonType": "object",
			},
		},
	}
	createCollectionOptions := options.CreateCollection().SetEncryptedFields(schemaMap)
	_, _, err =
		clientEncryption.CreateEncryptedCollection(
			context.TODO(),
			client.Database("foo"),
			"patient",
			createCollectionOptions,
			"local",
			localMasterKey,
		)
		// end-create-encrypted-collection
	if err != nil {
		panic(fmt.Sprintf("Unable to create encrypted collection: %s", err))
	}

	// start-insert-document
	patientDocument := &PatientDocument{
		PatientName: "Jon Doe",
		PatientID:   12345678,
		PatientRecord: PatientRecord{
			SSN: "987-65-4320",
			Billing: PaymentInfo{
				Type:   "Visa",
				Number: "4111111111111111",
			},
			BillAmount: 1500,
		},
	}

	coll := client.Database("foo").Collection("patient")
	_, err = coll.InsertOne(context.TODO(), patientDocument)
	if err != nil {
		panic(fmt.Sprintf("Unable to insert the patientDocument: %s", err))
	}
	var findResult PatientDocument
	err = coll.FindOne(
		context.TODO(),
		bson.M{"patientRecord.ssn": "987-65-4320"},
	).Decode(&findResult)

	// end-find-document
	if err != nil {
		fmt.Print("Unable to find the document\n")
	} else {
		output, _ := json.MarshalIndent(findResult, "", "    ")
		fmt.Printf("%s\n", output)
	}
}

// create a client configured with auto encryption that uses the key generated by createDataKey
func createEncryptedClient() *mongo.Client {
	// initial setup
	decodedKey, err := base64.StdEncoding.DecodeString(localMasterKey)
	if err != nil {
		log.Fatalf("base64 decode error: %v", err)
	}
	kmsProviders = map[string]map[string]interface{}{
		"local": {"key": decodedKey},
	}
	cryptSharedLibraryPath := map[string]interface{}{
		"cryptSharedLibPath": os.Getenv("MDB_CRYPT_SHARED_LIB_PATH"), // Path to your Automatic Encryption Shared Library
	}

	uri := os.Getenv("MONGODB_URI")

	autoEncOpts := options.AutoEncryption().
		SetKeyVaultNamespace("keyvault.datakeys").
		SetKmsProviders(kmsProviders).
		SetExtraOptions(cryptSharedLibraryPath)

	clientOpts := options.Client().ApplyURI(uri).SetAutoEncryptionOptions(autoEncOpts)
	autoEncryptionClient, err := mongo.Connect(ctx, clientOpts)
	if err != nil {
		log.Fatalf("Connect error for client with automatic encryption: %v", err)
	}
	return autoEncryptionClient
}

func createEncryptionKey(clientEncryption *mongo.ClientEncryption, keyAltName string) (primitive.Binary, error) {
	dataKeyOpts := options.DataKey().SetKeyAltNames([]string{keyAltName})
	keyID, err := clientEncryption.CreateDataKey(context.TODO(), "local", dataKeyOpts)
	if err != nil {
		return primitive.Binary{}, fmt.Errorf("failed to create data key for %s: %v", keyAltName, err)
	}
	return keyID, nil
}
